version: '3.7'

networks:
  project-test:
    name: project-test

services:
  sample-project-mongo:
    container_name: sample-project-mongo
    build: mongo
    init: true
    ports:
      - 27018:27017
    volumes:
      - ./mongo/data/db:/data/db
    environment:
      MONGO_INITDB_DATABASE: sample-project
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD:
      MONGO_INITDB_USER_USERNAME: app-admin
      MONGO_INITDB_USER_PASSWORD:
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '2000M'
      restart_policy:
        condition: on-failure
        max_attempts: 3
    networks:
      - project-test

  sample-project-apos:
    container_name: sample-project-apos
    build: apos
    init: true
    volumes:
      - ./apos/app.js:/app/app.js
      - ./apos/config:/app/config
      - ./apos/modules:/app/modules
      - ./apos/public:/app/public
      - ./apos/package.json:/app/package.json
      - ./apos/public/vue-app:/app/public/vue-app
    ports:
      - 8080:8080
    depends_on:
      - sample-project-mongo
    environment:
      APOS_DEV:
      NODE_ENV: ${NODE_ENV:-production}
      NODE_APP_INSTANCE: ${NODE_APP_INSTANCE:?NODE_APP_INSTANCE is mandatory}
      HOST: docker
      MONGO_DB:
      WAIT_HOSTS: sample-project-mongo:27017
    healthcheck:
      test: node healthcheck
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: '3000M'
      restart_policy:
        condition: on-failure
        max_attempts: 3
    networks:
      - project-test
